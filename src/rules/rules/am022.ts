import {
  addError,
  ErrorContext,
  FilterParams,
  forEachHeading,
  makeTokenCache,
  slugify,
} from "../shared";

export function AM022(
  params: FilterParams,
  onError: (context: ErrorContext) => void
) {
  makeTokenCache(params);
  const anchors: Record<
    string,
    { anchorid: string; slug: string; linenumber: number }[]
  > = {};
  const collision: Record<string, number> = {};

  forEachHeading(params, function forHeading(heading, content) {
    const linenumber = heading.lineNumber;
    let headingtitle = heading.line
      .replace(/^[#]+ /, "")
      .replace(/[\s]*\{\#.*?\}[\s]*$/, "");
    const hasanchor = heading.line.search(/\{#.*?\}[\s]*$/) >= 0;
    let anchorid = heading.line.replace(/^.*?[\s]*\{\#(.*?)\}[\s]*$/, "$1");
    let sluganchorid = "";
    let key = "";

    headingtitle = headingtitle.replace(/\[!DNL (.*?)]/, "$1");
    headingtitle = headingtitle.replace(/\[!UICONTROL (.*?)]/, "$1");

    if (!hasanchor) {
      anchorid = "";
      sluganchorid = slugify(headingtitle);
      if (!(sluganchorid in collision)) {
        collision[sluganchorid] = 1;
      }
      if (sluganchorid in anchors) {
        collision[sluganchorid] = collision[sluganchorid] + 1;
        sluganchorid = sluganchorid + "-" + collision[sluganchorid].toString();
      }
    }
    key = anchorid ? anchorid : sluganchorid;

    if (!(key in anchors)) {
      anchors[key] = [];
    }
    anchors[key].push({
      anchorid: anchorid,
      slug: sluganchorid,
      linenumber: linenumber,
    });
  });

  for (const [key, value] of Object.entries(anchors)) {
    if (value.length > 1) {
      for (const [_, value2] of Object.entries(value)) {
        const anchortype = value2.slug ? " (autogenerated) " : "";
        addError(
          onError,
          value2.linenumber,
          null,
          "Duplicate anchor " + anchortype + "'" + key + "'"
        );
      }
    }
  }
}

module.exports = {
  names: ["AM022", "header-anchor-collision"],
  description: "Heading anchor has collision",
  tags: ["headings", "headers"],
  function: AM022,
};
